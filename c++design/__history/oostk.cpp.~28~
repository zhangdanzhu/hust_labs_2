#include "stackh.h"

OOSTK::OOSTK(int m): elems(new int[m]), max(elems?m:0)       // 初始化栈：最多m个元素
{
	pos = 0;
}

OOSTK::OOSTK(const OOSTK&s):elems(new int[s.size()]), max(elems?s.size():0)   // 用栈s拷贝初始化栈
{
	if (elems){
    	for (int i = 0; i < max; i++){
			elems[i] = s.getelem(i);
		}
	}
	pos = s.pos;
}

int OOSTK::size() const         // 返回栈的最大元素个数max
{
	return max;
}

int OOSTK::howMany() const		   //返回栈的实际元素个数pos
{
	return pos;
}

int OOSTK::getelem(int x) const	   //取下标x处的栈元素
{
	return elems[x];
}

OOSTK& OOSTK::push(int e) 		//将e入栈，并返回当前栈
{
	if (max > pos){
		elems[pos++] = e;
	}
	else {
		cout<<"栈已满！入栈失败！\n";
	}
	return *this;
}

OOSTK& OOSTK::pop(int &e) 	    //出栈到e，并返回当前栈
{
	if (0 == pos){
		cout<<"栈已空！出栈失败！\n";
	}
	else {
		e = elems[pos--];
	}
	return *this;
}

OOSTK& OOSTK::assign(const OOSTK&s) 	//赋s给栈，并返回被赋值的当前栈
{
	// TODO:
	return *this;
}

void OOSTK::print() const						//打印栈
{
	if (0 == pos){
		printf("栈为空！\n");
	}
	else {
		for (int i = pos-1; i >= 0; i--){
			cout<<elems[i]<<" ";
		}
	}
	cout<<"\n";
}

OOSTK::~OOSTK()							//销毁栈
{
	free(elems);
}
