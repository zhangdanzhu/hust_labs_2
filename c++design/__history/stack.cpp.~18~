#include "stackh.h"

STACK::STACK(int m):elems(new int[m]), max(elems?m:0)  //初始化栈：最多m个元素
{
	pos = 0;
}


STACK::STACK(const STACK&s):elems(new int[s.size()]), max(elems?s.size():0) 	//用栈s拷贝初始化栈
{
	pos = 0;
}

int STACK::size() const				//返回栈的最大元素个数max
{
	return max;
}

STACK::operator int ( ) const			//返回栈的实际元素个数pos
{
	return pos;
}

int STACK::operator[ ](int x) const		//取下标x处的栈元素
{
	if (x >= 0 && x < pos){
		return elems[x];
	}
	cout<<"该下标非法！"<<endl;
	return (-1);
}

STACK& STACK::operator<<(int e) 	//将e入栈，并返回当前栈
{
	if (pos < max){
		elems[pos++] = e;
	}
	else {
		cout<<"栈已满！"<<endl;
	}
	return *this;
}

STACK& STACK::operator>>(int &e)	//出栈到e，并返回当前栈
{
	if (pos != 0){
		e = elems[pos--];
	}
	else {
		cout<<"栈为空！"<<endl;
	}
	return *this;
}

STACK& STACK::operator=(const STACK&s) //赋s给当前栈并返回该栈
{
	// TODO
	return *this;
}

void STACK::print() const				//打印栈
{
	if (pos){
		for (int i = pos-1; i >= 0; i--){
			cout<<elems[i];
		}
		cout<<endl;
	}
	else {
		cout<<"栈为空！"<<endl;
	}
}

STACK::~STACK( )						//销毁栈
{
	if (elems){
		delete elems;
	}
}

